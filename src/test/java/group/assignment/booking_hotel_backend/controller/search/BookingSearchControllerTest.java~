package group.assignment.booking_hotel_backend.controller.search;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import group.assignment.booking_hotel_backend.dto.BookingSearchRequest;
import group.assignment.booking_hotel_backend.services.BookingService;
import org.hamcrest.Matchers;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;


@SpringBootTest
@AutoConfigureMockMvc
public class BookingSearchControllerTest {
    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Mock
    private BookingService bookingService;


    // Kiểm tra lựa chọn khu vực "Tất cả"
    @Test
    public void testSearchRoom_SelectAllAreas_ShouldReturnAllCities() throws Exception {
        // Arrange
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("")
                .city("")
                .district("")
                .checkInDate("2025-06-01")
                .checkOutDate("2025-06-02")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(500000.0)
                .sortBy("price_asc")
                .services(List.of())
                .build();

        // Act
        String response = mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        JsonNode jsonNode = objectMapper.readTree(response);

        // Assert
        assertThat(jsonNode.size()).isGreaterThan(0);

        boolean isFound = false;
        for (JsonNode node : jsonNode) {
            if (node.get("roomName").asText().equals("Ocean Vip Room") &&
                    node.get("hotelName").asText().equals("Grand Hotel Hanoi")) {
                isFound = true;
                break;
            }
        }
        assertThat(isFound).isTrue();
    }


    // Kiểm tra lựa chọn khu vực cụ thể (Hà Nội)
    @Test
    public void testSearchRoom_SelectSpecificCity_ShouldReturnCorrectCities() throws Exception {
        // Arrange
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("")
                .city("Hanoi")
                .district("")
                .checkInDate("2025-06-01")
                .checkOutDate("2025-06-02")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(500000.0)
                .sortBy("price_asc")
                .services(List.of())
                .build();

        // Act
        String response = mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        JsonNode jsonNode = objectMapper.readTree(response);

        // Assert
        boolean isFound = false;
        for (JsonNode node : jsonNode) {
            if (node.get("roomName").asText().equals("Ocean Vip Room") &&
                    node.get("hotelName").asText().equals("Grand Hotel Hanoi")) {
                isFound = true;
                break;
            }
        }
        assertThat(isFound).isTrue();
    }


    //  Kiểm tra lựa chọn quận "Tất cả"
    @Test
    public void testSearchRoom_SelectAllDistricts_ShouldReturnAllRooms() throws Exception {
        // Arrange
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("")
                .city("")
                .district("")
                .checkInDate("2025-06-01")
                .checkOutDate("2025-06-02")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(500000.0)
                .sortBy("price_asc")
                .services(List.of())
                .build();

        // Act
        String response = mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        JsonNode jsonNode = objectMapper.readTree(response);

        // Assert
        boolean isFound = false;
        for (JsonNode node : jsonNode) {
            if (node.get("roomName").asText().equals("Ocean Vip Room") &&
                    node.get("hotelName").asText().equals("Grand Hotel Hanoi")) {
                isFound = true;
                break;
            }
        }
        assertThat(isFound).isTrue();
    }

    //  Kiểm tra lựa chọn quận cụ thể (Hoàn Kiếm)
    @Test
    public void testSearchRoom_SelectSpecificDistrict_ShouldReturnCorrectRooms() throws Exception {
        // Arrange
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("")
                .city("")
                .district("Hoan Kiem")
                .checkInDate("2025-06-01")
                .checkOutDate("2025-06-02")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(500000.0)
                .sortBy("price_asc")
                .services(List.of())
                .build();

        // Act
        String response = mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        JsonNode jsonNode = objectMapper.readTree(response);

        // Assert
        boolean isFound = false;
        for (JsonNode node : jsonNode) {
            if (node.get("roomName").asText().equals("Ocean Vip Room") &&
                    node.get("hotelName").asText().equals("Grand Hotel Hanoi")) {
                isFound = true;
                break;
            }
        }
        assertThat(isFound).isTrue();
    }



    // Kiểm tra đặt dưới 2h, không vượt số người lớn tiêu chuẩn, số trẻ em bằng số trẻ em miễn phí
    @Test
    public void testBooking_Under2Hours_WithinAdultLimit_EqualFreeChildren_ShouldReturnCombo2hPrice() throws Exception {
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("Ocean Vip Room")
                .city("Hanoi")
                .district("Hoan Kiem")
                .checkInDate("2024-06-05")
                .checkOutDate("2024-06-05")
                .checkInTime("12:00")
                .checkOutTime("13:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(600000.0)
                .sortBy("price_asc")
                .services(List.of())
                .build();

        String response = mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        JsonNode jsonNode = objectMapper.readTree(response);
        JsonNode foundNode = null;
        for (JsonNode node : jsonNode) {
            if (node.get("roomName").asText().equals("Ocean Vip Room") &&
                    node.get("hotelName").asText().equals("Grand Hotel Hanoi")) {
                foundNode = node;
                break;
            }
        }
        assertThat(foundNode).isNotNull();
        assertThat(foundNode.get("price").asDouble()).isEqualTo(150000);
        System.out.println("Found room: " + foundNode);
    }

    // Kiểm tra đặt dưới 2h, vượt số người lớn tiêu chuẩn, số trẻ em bằng số trẻ em miễn phí
    @Test
    public void testBooking_Under2Hours_ExceedAdultLimit_EqualFreeChildren_ShouldIncludeExtraAdultFee() throws Exception {
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("Ocean Vip Room")
                .city("Hanoi")
                .district("Hoan Kiem")
                .checkInDate("2024-06-05")
                .checkOutDate("2024-06-05")
                .checkInTime("12:00")
                .checkOutTime("13:00")
                .adults(3)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(600000.0)
                .sortBy("price_asc")
                .services(List.of())
                .build();

        String response = mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        JsonNode jsonNode = objectMapper.readTree(response);
        JsonNode foundNode = null;
        for (JsonNode node : jsonNode) {
            if (node.get("roomName").asText().equals("Ocean Vip Room") &&
                    node.get("hotelName").asText().equals("Grand Hotel Hanoi")) {
                foundNode = node;
                break;
            }
        }
        assertThat(foundNode).isNotNull();
        assertThat(foundNode.get("price").asDouble()).isEqualTo(250000);
        System.out.println("Found room: " + foundNode);
    }

    // Kiểm tra đặt dưới 2h, không vượt số người lớn tiêu chuẩn, số trẻ em lớn hơn số trẻ em miễn phí
    @Test
    public void testBooking_Under2Hours_WithinAdultLimit_ExceedFreeChildren_ShouldIncludeExtraChildFee() throws Exception {
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("Ocean Vip Room")
                .city("Hanoi")
                .district("Hoan Kiem")
                .checkInDate("2024-06-05")
                .checkOutDate("2024-06-05")
                .checkInTime("12:00")
                .checkOutTime("13:00")
                .adults(2)
                .children(2)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(600000.0)
                .sortBy("price_asc")
                .services(List.of())
                .build();

        String response = mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        JsonNode jsonNode = objectMapper.readTree(response);
        JsonNode foundNode = null;
        for (JsonNode node : jsonNode) {
            if (node.get("roomName").asText().equals("Ocean Vip Room") &&
                    node.get("hotelName").asText().equals("Grand Hotel Hanoi")) {
                foundNode = node;
                break;
            }
        }
        assertThat(foundNode).isNotNull();
        assertThat(foundNode.get("price").asDouble()).isEqualTo(250000);
        System.out.println("Found room: " + foundNode);
    }

    // Kiểm tra đặt trên 2h, giá tính theo ngày đêm rẻ hơn giá giờ, không vượt số người lớn tiêu chuẩn, số trẻ em bằng số trẻ em miễn phí
    // Fail
    @Test
    public void testBooking_Over2Hours_DayPriceCheaperThanHourly_WithinAdultLimit_EqualFreeChildren_ShouldReturnDayPrice() throws Exception {
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("Ocean Vip Room")
                .city("Hanoi")
                .district("Hoan Kiem")
                .checkInDate("2024-06-05")
                .checkOutDate("2024-06-05")
                .checkInTime("14:00")
                .checkOutTime("19:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(600000.0)
                .sortBy("price_asc")
                .services(List.of())
                .build();

        String response = mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        JsonNode jsonNode = objectMapper.readTree(response);

        JsonNode foundNode = null;
        for (JsonNode node : jsonNode) {
            if (node.get("roomName").asText().equals("Ocean Vip Room") &&
                    node.get("hotelName").asText().equals("Grand Hotel Hanoi")) {
                foundNode = node;
                break;
            }
        }

        assertThat(foundNode).isNotNull();
        assertThat(foundNode.get("price").asDouble()).isEqualTo(400000);
        System.out.println("Found room: " + foundNode);
    }

    // Kiểm tra đặt trên 2h, giá giờ rẻ hơn giá ngày đêm, không vượt số người lớn tiêu chuẩn, số trẻ em bằng số trẻ em miễn phí
    @Test
    public void testBooking_Over2Hours_HourlyPriceCheaper_WithinAdultLimit_EqualFreeChildren_ShouldApplyHourlyPrice() throws Exception {
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("Ocean Vip Room")
                .city("Hanoi")
                .district("Hoan Kiem")
                .checkInDate("2024-06-05")
                .checkOutDate("2024-06-05")
                .checkInTime("14:00")
                .checkOutTime("17:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(600000.0)
                .sortBy("price_asc")
                .services(List.of())
                .build();

        String response = mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        JsonNode jsonNode = objectMapper.readTree(response);
        JsonNode foundNode = null;
        for (JsonNode node : jsonNode) {
            if (node.get("roomName").asText().equals("Ocean Vip Room") &&
                    node.get("hotelName").asText().equals("Grand Hotel Hanoi")) {
                foundNode = node;
                break;
            }
        }
        assertThat(foundNode).isNotNull();
        assertThat(foundNode.get("price").asDouble()).isEqualTo(250000);
        System.out.println("Found room: " + foundNode);
    }

    // Kiểm tra đặt ngày đêm, nhận phòng sớm 1h so khung 14h chuẩn, không vượt số người lớn tiêu chuẩn, số trẻ em bằng số trẻ em miễn phí
    @Test
    public void testBooking_FullDay_EarlyCheckIn_OneHourBeforeStandardTime_WithinAdultLimit_EqualFreeChildren_ShouldIncludeEarlyCheckInFee() throws Exception {
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("Ocean Vip Room")
                .city("Hanoi")
                .district("Hoan Kiem")
                .checkInDate("2024-06-05")
                .checkOutDate("2024-06-06")
                .checkInTime("13:00")
                .checkOutTime("11:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(600000.0)
                .sortBy("price_asc")
                .services(List.of())
                .build();

        String response = mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        JsonNode jsonNode = objectMapper.readTree(response);
        JsonNode foundNode = null;
        for (JsonNode node : jsonNode) {
            if (node.get("roomName").asText().equals("Ocean Vip Room") &&
                    node.get("hotelName").asText().equals("Grand Hotel Hanoi")) {
                foundNode = node;
                break;
            }
        }
        assertThat(foundNode).isNotNull();
        assertThat(foundNode.get("price").asDouble()).isEqualTo(500000);
        System.out.println("Found room: " + foundNode);
    }

    // Kiểm tra đặt ngày đêm, trả phòng muộn 1h so khung 11h chuẩn, không vượt số người lớn tiêu chuẩn, số trẻ em bằng số trẻ em miễn phí
    @Test
    public void testBooking_FullDay_LateCheckOut_OneHourAfterStandardTime_WithinAdultLimit_EqualFreeChildren_ShouldIncludeLateCheckOutFee() throws Exception {
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("Ocean Vip Room")
                .city("Hanoi")
                .district("Hoan Kiem")
                .checkInDate("2024-06-05")
                .checkOutDate("2024-06-06")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(600000.0)
                .sortBy("price_asc")
                .services(List.of())
                .build();

        String response = mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        JsonNode jsonNode = objectMapper.readTree(response);
        JsonNode foundNode = null;
        for (JsonNode node : jsonNode) {
            if (node.get("roomName").asText().equals("Ocean Vip Room") &&
                    node.get("hotelName").asText().equals("Grand Hotel Hanoi")) {
                foundNode = node;
                break;
            }
        }
        assertThat(foundNode).isNotNull();
        assertThat(foundNode.get("price").asDouble()).isEqualTo(500000);
        System.out.println("Found room: " + foundNode);
    }

    // Kiểm tra sắp xếp giá từ thấp đến cao
    @Test
    public void testSearchHotels_SortByPriceAscending_ShouldReturnSortedByPriceAsc() throws Exception {
        // Arrange
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("")
                .city("Hanoi")
                .district("Hoan Kiem")
                .checkInDate("2024-06-05")
                .checkOutDate("2024-06-06")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(1000000.0)
                .sortBy("price_asc")    // Sắp xếp theo giá tăng dần
                .services(List.of())
                .build();

        // Act
        String response = mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        JsonNode jsonNode = objectMapper.readTree(response);

        // Assert
        double previousPrice = 0.0;
        for (JsonNode node : jsonNode) {
            double currentPrice = node.get("price").asDouble();
            assertThat(currentPrice).isGreaterThanOrEqualTo(previousPrice);
            previousPrice = currentPrice;
        }
    }

    // Kiểm tra sắp xếp giá từ cao đến thấp
    @Test
    public void testSearchHotels_SortByPriceDescending_ShouldReturnSortedByPriceDesc() throws Exception {
        // Arrange
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("")
                .city("Hanoi")
                .district("Hoan Kiem")
                .checkInDate("2024-06-05")
                .checkOutDate("2024-06-06")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(1000000.0)
                .sortBy("price_desc")    // Sắp xếp theo giá giảm dần
                .services(List.of())
                .build();

        // Act
        String response = mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        JsonNode jsonNode = objectMapper.readTree(response);

        // Assert
        double previousPrice = Double.MAX_VALUE;
        for (JsonNode node : jsonNode) {
            double currentPrice = node.get("price").asDouble();
            assertThat(currentPrice).isLessThanOrEqualTo(previousPrice);
            previousPrice = currentPrice;
        }
    }

    // Kiểm tra sắp xếp theo đánh giá giảm dần
    @Test
    public void testSearchHotels_SortByRatingDescending_ShouldReturnSortedByRatingDesc() throws Exception {
        // Arrange
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("")
                .city("Hanoi")
                .district("Hoan Kiem")
                .checkInDate("2024-06-05")
                .checkOutDate("2024-06-06")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(1000000.0)
                .sortBy("rating_desc")    // Sắp xếp theo đánh giá giảm dần
                .services(List.of())
                .build();

        // Act
        String response = mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        JsonNode jsonNode = objectMapper.readTree(response);

        // Assert
        double previousRating = Double.MAX_VALUE;
        for (JsonNode node : jsonNode) {
            double currentRating = node.get("rating").asDouble();
            assertThat(currentRating).isLessThanOrEqualTo(previousRating);
            previousRating = currentRating;
        }
    }

    @Test
    public void testSearchHotels_CheckInDateInThePast_ShouldReturnBadRequest() throws Exception {
        // Arrange
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("")
                .city("")
                .district("")
                .checkInDate("2025-06-01")
                .checkOutDate("2025-06-16")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(1000000.0)
                .sortBy("rating_desc")
                .services(List.of())
                .build();

        // Act & Assert
        mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isBadRequest());
    }

    // Kiểm tra thời gian trả phòng đã qua
    @Test
    public void testSearchHotels_CheckOutDateInPast_ShouldReturnBadRequest() throws Exception {
        // Arrange
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("")
                .city("")
                .district("")
                .checkInDate("2025-06-01")
                .checkOutDate("2025-06-13")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(1000000.0)
                .sortBy("")
                .services(List.of())
                .build();

        // Act & Assert
        mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isBadRequest());
    }

    // Kiểm tra thời gian nhận phòng lớn hơn thời gian trả phòng
    @Test
    public void testSearchHotels_CheckInTimeAfterCheckOutTime_ShouldReturnBadRequest() throws Exception {
        // Arrange
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("")
                .city("")
                .district("")
                .checkInDate("2025-06-15")
                .checkOutDate("2025-06-14")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(1000000.0)
                .sortBy("rating_desc")
                .services(List.of())
                .build();

        // Act & Assert
        mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isBadRequest());
    }

    // Kiểm tra số người lớn để số âm
    @Test
    public void testSearchHotels_NegativeAdults_ShouldReturnBadRequest() throws Exception {
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("")
                .city("")
                .district("")
                .checkInDate("2025-06-14")
                .checkOutDate("2025-06-15")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(-1)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(1000000.0)
                .sortBy("rating_desc")
                .services(List.of())
                .build();

        mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isBadRequest());
    }

    // Kiểm tra số trẻ em để số âm
    @Test
    public void testSearchHotels_NegativeChildren_ShouldReturnBadRequest() throws Exception {
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("")
                .city("")
                .district("")
                .checkInDate("2025-06-14")
                .checkOutDate("2025-06-15")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(-1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(1000000.0)
                .sortBy("rating_desc")
                .services(List.of())
                .build();

        mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isBadRequest());
    }

    // Kiểm tra số  giường để số âm
    @Test
    public void testSearchHotels_NegativeBedNumber_ShouldReturnBadRequest() throws Exception {
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("")
                .city("")
                .district("")
                .checkInDate("2025-06-14")
                .checkOutDate("2025-06-15")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(1)
                .bedNumber(-1)
                .priceFrom(0.0)
                .priceTo(1000000.0)
                .sortBy("rating_desc")
                .services(List.of())
                .build();

        mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isBadRequest());
    }

    // Kiểm tra khoảng giá bắt đầu để số âm
    @Test
    public void testSearchHotels_NegativePriceFrom_ShouldReturnBadRequest() throws Exception {
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("")
                .city("")
                .district("")
                .checkInDate("2025-06-14")
                .checkOutDate("2025-06-15")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(-1.0)
                .priceTo(1000000.0)
                .sortBy("rating_desc")
                .services(List.of())
                .build();

        mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isBadRequest());
    }

    // Kiểm tra khoảng giá kết thúc để số âm
    @Test
    public void testSearchHotels_NegativePriceTo_ShouldReturnBadRequest() throws Exception {
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("")
                .city("")
                .district("")
                .checkInDate("2025-06-14")
                .checkOutDate("2025-06-15")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(-1000.0)
                .sortBy("rating_desc")
                .services(List.of())
                .build();

        mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isBadRequest());
    }

    // Kiểm tra khoảng giá kết thúc bé hơn bắt đầu
    @Test
    public void testSearchHotels_PriceFromGreaterThanPriceTo_ShouldReturnBadRequest() throws Exception {
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("")
                .city("")
                .district("")
                .checkInDate("2025-06-14")
                .checkOutDate("2025-06-15")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(1000000.0)
                .priceTo(100000.0)
                .sortBy("rating_desc")
                .services(List.of())
                .build();

        mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isBadRequest());
    }

    // Kiểm tra dịch vụ để trống không checkbox
    @Test
    public void testSearchHotels_NoServiceSelected_ShouldReturnAllAvailableRooms() throws Exception {
        // Arrange
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .infoSearch("")
                .city("")
                .district("")
                .checkInDate("2025-06-14")
                .checkOutDate("2025-06-15")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(1000000.0)
                .sortBy("rating_desc")
                .services(Collections.emptyList())
                .build();

        // Act & Assert
        mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isOk());
    }


    // Kiểm tra dịch vụ checkbox cụ thể
    @Test
    public void testSearchHotels_ServiceBarMatched_ShouldReturnOneRoom() throws Exception {
        BookingSearchRequest searchRequest = BookingSearchRequest.builder()
                .checkInDate("2025-06-14")
                .checkOutDate("2025-06-15")
                .checkInTime("14:00")
                .checkOutTime("12:00")
                .adults(2)
                .children(1)
                .bedNumber(1)
                .priceFrom(0.0)
                .priceTo(1000000.0)
                .sortBy("rating_desc")
                .services(List.of("Giặt ủi")) // yêu cầu phòng có Giặt ủi
                .build();

        mockMvc.perform(post("/api/booking/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(searchRequest)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].services").isArray())
                .andExpect(jsonPath("$[0].services").value(Matchers.hasItem("Giặt ủi")));
    }

}
