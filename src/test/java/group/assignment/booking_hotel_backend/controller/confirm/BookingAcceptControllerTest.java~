package group.assignment.booking_hotel_backend.controller.confirm;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import group.assignment.booking_hotel_backend.dto.BookingRequestDto;
import group.assignment.booking_hotel_backend.dto.BookingResponseDto;
import group.assignment.booking_hotel_backend.dto.UpdateScoreRequest;
import group.assignment.booking_hotel_backend.models.BookingStatus;
import group.assignment.booking_hotel_backend.models.User;
import group.assignment.booking_hotel_backend.services.UserService;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import java.time.LocalDateTime;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
public class BookingAcceptControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Mock
    private UserService userService;

    // Tạo booking mới
    @Test
    public void testCreateBooking_ShouldReturnBookingDetails() throws Exception {
        // Arrange
        BookingRequestDto requestDto = BookingRequestDto.builder()
                .checkIn(LocalDateTime.parse("2025-06-01T12:00:00"))
                .checkOut(LocalDateTime.parse("2025-06-02T12:00:00"))
                .price(500000.0)
                .userId(1)
                .roomId(10)
                .billId(null)
                .build();

        // Act
        String response = mockMvc.perform(post("/api/booking")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(requestDto)))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();
        BookingResponseDto responseDto = objectMapper.readValue(response, BookingResponseDto.class);

        // Assert
        assertThat(responseDto.getBookingId()).isNotNull();
        assertThat(responseDto.getPrice()).isEqualTo(500000.0);
        assertThat(responseDto.getStatus()).isEqualTo("PENDING");
        assertThat(responseDto.getUserId()).isEqualTo(1);
        assertThat(responseDto.getRoomId()).isEqualTo(10);
        assertThat(responseDto.getCheckIn()).isEqualTo(requestDto.getCheckIn());
        assertThat(responseDto.getCheckOut()).isEqualTo(requestDto.getCheckOut());
    }

    @Test
    @WithMockUser(username = "user")
    void updateScore_shouldReturnUpdatedUser_withMockService() throws Exception {
        // Arrange
        UpdateScoreRequest request = new UpdateScoreRequest();
        request.setUserId(1);
        request.setScore(2000);

        User mockUser = new User();
        mockUser.setUserId(1);
        mockUser.setScore(2000);

        Mockito.when(userService.updateScoreByUserId(1, 2000)).thenReturn(mockUser);

        // Act
        String response = mockMvc.perform(put("/api/user/score")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        // Assert
        JsonNode jsonNode = objectMapper.readTree(response);
        assertThat(jsonNode.get("userId").asInt()).isEqualTo(1);
        assertThat(jsonNode.get("score").asInt()).isEqualTo(2000);
    }


    @Test
    void updateScore_shouldReturnNotFoundIfNotFound() throws Exception {
        // Arrange
        UpdateScoreRequest request = new UpdateScoreRequest();
        request.setUserId(99);
        request.setScore(500);

        // Act & Assert
        mockMvc.perform(put("/api/user/score")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isNotFound());
    }
}


//
//package group.assignment.booking_hotel_backend.controller;
//
//import com.fasterxml.jackson.databind.ObjectMapper;
//import group.assignment.booking_hotel_backend.config.AuditAwareImpl;
//import group.assignment.booking_hotel_backend.config.SecurityConfig;
//import group.assignment.booking_hotel_backend.dto.BookingRequestDto;
//import group.assignment.booking_hotel_backend.dto.BookingResponseDto;
//import group.assignment.booking_hotel_backend.dto.UpdateScoreRequest;
//import group.assignment.booking_hotel_backend.mapper.UserMapper;
//import group.assignment.booking_hotel_backend.models.Booking;
//import group.assignment.booking_hotel_backend.models.BookingStatus;
//import group.assignment.booking_hotel_backend.models.User;
//import group.assignment.booking_hotel_backend.security.JwtRequestFilter;
//import group.assignment.booking_hotel_backend.security.JwtUtil;
//import group.assignment.booking_hotel_backend.services.BookingService;
//import group.assignment.booking_hotel_backend.services.RoleService;
//import group.assignment.booking_hotel_backend.services.RoomService;
//import group.assignment.booking_hotel_backend.services.UserService;
//import org.junit.jupiter.api.Test;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration;
//import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;
//import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
//import org.springframework.context.annotation.ComponentScan;
//import org.springframework.context.annotation.FilterType;
//import org.springframework.data.domain.AuditorAware;
//import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
//import org.springframework.http.MediaType;
//import org.springframework.security.core.userdetails.UserDetailsService;
//import org.springframework.security.test.context.support.WithMockUser;
//import org.springframework.test.context.bean.override.mockito.MockitoBean;
//import org.springframework.test.web.servlet.MockMvc;
//
//import java.time.LocalDateTime;
//import java.util.Optional;
//
//import static org.mockito.ArgumentMatchers.any;
//import static org.mockito.ArgumentMatchers.eq;
//import static org.mockito.Mockito.when;
//import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
//import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
//import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
//import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
//import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
//
//// 1. Chỉ định các Controller cần test
//@WebMvcTest(controllers = {BookingController.class, UserController.class},
//        // 2. Vô hiệu hóa các Auto-Configuration liên quan đến Database
//        excludeAutoConfiguration = {
//                HibernateJpaAutoConfiguration.class,
//                JpaRepositoriesAutoConfiguration.class
//        },
//        // 3. Vô hiệu hóa các Annotation liên quan đến Database
//        excludeFilters = @ComponentScan.Filter(
//                type = FilterType.ANNOTATION,
//                classes = {EnableJpaAuditing.class} // Lỗi của bạn là do cái này!
//        )
//)
//public class BookingAcceptControllerTest {
//
//    @Autowired
//    private MockMvc mockMvc;
//
//    @Autowired
//    private ObjectMapper objectMapper;
//
//    // --- CÁC MOCK CHO SERVICE MÀ CONTROLLER SỬ DỤNG ---
//    @MockitoBean
//    private BookingService bookingService;
//
//    @MockitoBean
//    private UserService userService;
//
//    @MockitoBean
//    private RoomService roomService;
//
//    @MockitoBean
//    private RoleService roleService;
//
//    // --- CÁC MOCK MÀ SECURITYCONFIG CẦN ---
//    // (Bạn cần xem SecurityConfig.java của bạn để biết nó cần những gì)
//    @MockitoBean
//    private UserDetailsService userDetailsService;
//
//    @MockitoBean
//    private JwtUtil jwtUtil;
//
//    @MockitoBean
//    private AuditorAware<String> auditorAware;
//
//    @MockitoBean
//    private AuditAwareImpl auditAwareImpl;
//
//    @MockitoBean
//    private JwtRequestFilter jwtRequestFilter;
//
//
//    @MockitoBean
//    private SecurityConfig securityConfig;
//
//    @MockitoBean
//    private UserMapper userMapper;
//
//    // Xóa tất cả các MockitoBean không cần thiết khác (RoleService, RoomService, PasswordEncoder,...)
//    // trừ khi Controller hoặc SecurityConfig của bạn thực sự inject chúng.
//
//    // Sửa lỗi trong test case này: service trả về DTO
//    @Test
//    @WithMockUser
//    public void testCreateBooking_ShouldReturnBookingDetails() throws Exception {
//        // Arrange
//        BookingRequestDto requestDto = BookingRequestDto.builder()
//                .checkIn(LocalDateTime.parse("2025-06-01T12:00:00"))
//                .checkOut(LocalDateTime.parse("2025-06-02T12:00:00"))
//                .price(500000.0).userId(1).roomId(10).build();
//
//        BookingResponseDto mockResponse = BookingResponseDto.builder()
//                .bookingId(1).checkIn(requestDto.getCheckIn())
//                .checkOut(requestDto.getCheckOut()).price(500000.0)
//                .status("PENDING").userId(1).roomId(10).build();
//
//        // Giả sử service createBooking của bạn nhận DTO và trả về DTO
//        when(bookingService.createBooking(any(BookingRequestDto.class))).thenReturn(mockResponse);
//
//        // Act & Assert
//        mockMvc.perform(post("/api/booking")
//                        .contentType(MediaType.APPLICATION_JSON)
//                        .content(objectMapper.writeValueAsString(requestDto))
//                        .with(csrf()))
//                .andExpect(status().isOk());
////                .andExpect(jsonPath("$.bookingId").value(1))
////                .andExpect(jsonPath("$.status").value("PENDING"));
//    }
//
//    // Sửa lỗi trong test case này: findById trả về Optional<Entity>
//    @Test
//    @WithMockUser
//    public void testGetBookingById_ShouldReturnBookingDetails() throws Exception {
//        // Arrange
//        int bookingId = 104;
//        Booking mockBookingEntity = new Booking();
//        mockBookingEntity.setBookingId(bookingId);
//        mockBookingEntity.setStatus(BookingStatus.CONFIRMED);
//
//        // SỬA LẠI: findById của repository/service thường trả về Optional
//        when(bookingService.findById(bookingId)).thenReturn(mockBookingEntity);
//
//        // Act & Assert
//        mockMvc.perform(get("/api/booking/" + bookingId))
//                .andExpect(status().isOk());
////                .andExpect(jsonPath("$.bookingId").value(bookingId))
////                .andExpect(jsonPath("$.status").value("CONFIRMED"));
//    }
//
//    // Test case này đúng logic: service trả về Entity
//    @Test
//    @WithMockUser
//    public void testUpdateBookingStatus_ShouldUpdateStatusAndReturnUpdatedBooking() throws Exception {
//        // Arrange
//        Integer bookingId = 104;
//        BookingStatus newStatus = BookingStatus.CONFIRMED;
//
//        Booking mockUpdatedBookingEntity = new Booking();
//        mockUpdatedBookingEntity.setBookingId(bookingId);
//        mockUpdatedBookingEntity.setStatus(newStatus);
//
//        when(bookingService.updateBookingStatus(eq(bookingId), eq(newStatus)))
//                .thenReturn(mockUpdatedBookingEntity);
//
//        // Act & Assert
//        mockMvc.perform(put("/api/booking/" + bookingId + "/status")
//                        .param("status", newStatus.name())
//                        .contentType(MediaType.APPLICATION_JSON)
//                        .with(csrf()))
//                .andExpect(status().isOk());
////                .andExpect(jsonPath("$.bookingId").value(bookingId))
////                .andExpect(jsonPath("$.status").value("CONFIRMED"));
//    }
//
//    // Test case này đúng logic: service trả về Entity
//    @Test
//    @WithMockUser
//    void updateScore_shouldReturnUpdatedUser() throws Exception {
//        // Arrange
//        UpdateScoreRequest request = new UpdateScoreRequest();
//        request.setUserId(1);
//        request.setScore(2000);
//
//        User mockUpdatedUserEntity = new User();
//        mockUpdatedUserEntity.setUserId(1);
//        mockUpdatedUserEntity.setScore(2000);
//
//        when(userService.updateScoreByUserId(eq(1), eq(2000)))
//                .thenReturn(mockUpdatedUserEntity);
//
//        // Act & Assert
//        mockMvc.perform(put("/api/user/score")
//                        .contentType(MediaType.APPLICATION_JSON)
//                        .content(objectMapper.writeValueAsString(request))
//                        .with(csrf()))
//                .andDo(print())
//                .andExpect(status().isOk());
////                .andExpect(jsonPath("$.userId").value(1))
////                .andExpect(jsonPath("$.score").value(2000));
//    }
//
//    @Test
//    void updateScore_shouldReturnUnauthorized_whenNotLoggedIn() throws Exception {
//        // Arrange
//        UpdateScoreRequest request = new UpdateScoreRequest();
//        request.setUserId(99);
//        request.setScore(500);
//
//        // Act & Assert
//        mockMvc.perform(put("/api/user/score")
//                        .contentType(MediaType.APPLICATION_JSON)
//                        .content(objectMapper.writeValueAsString(request))
//                        .with(csrf()))
//                .andExpect(status().isUnauthorized());
//    }
//}