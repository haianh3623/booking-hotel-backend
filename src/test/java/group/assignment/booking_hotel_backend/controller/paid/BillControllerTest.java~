package group.assignment.booking_hotel_backend.controller;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import group.assignment.booking_hotel_backend.models.Bill;
import group.assignment.booking_hotel_backend.models.BookingStatus;
import group.assignment.booking_hotel_backend.services.BillService;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
public class BillControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    // Lấy chi tiết hóa đơn bằng id
    @Test
    public void testGetBillById_ShouldReturnBillDetails() throws Exception {

        Integer billId = 1;
        // Act
        String response = mockMvc.perform(get("/api/bill/" + billId)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        // Assert
        JsonNode jsonNode = objectMapper.readTree(response);

        assertThat(jsonNode.get("billId").asInt()).isEqualTo(1);
        assertThat(jsonNode.get("paidStatus").asBoolean()).isTrue();
        assertThat(jsonNode.get("userId").asInt()).isEqualTo(1);
    }


    // Thay đổi trạng thái hóa đơn
    @Test
    public void testChangePaidStatus_ShouldUpdateStatusAndReturnUpdatedBill() throws Exception {
        // Arrange
        Integer billId = 1;
        boolean newPaidStatus = true;

        // Act
        String response = mockMvc.perform(patch("/api/bill/" + billId + "/status")
                        .param("paidStatus", String.valueOf(newPaidStatus))
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        // Assert
        JsonNode jsonNode = objectMapper.readTree(response);

        assertThat(jsonNode.get("billId").asInt()).isEqualTo(1);
        assertThat(jsonNode.get("paidStatus").asBoolean()).isTrue();
        assertThat(jsonNode.get("userId").asInt()).isEqualTo(1);
    }

    // Lấy booking chi tiết  theo id
    @Test
    public void testGetBookingById_ShouldReturnBookingDetails() throws Exception {
        int bookingId = 104;
        // Act
        String response = mockMvc.perform(get("/api/booking/" + + bookingId))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        JsonNode jsonNode = objectMapper.readTree(response);

        // Assert
        assertThat(jsonNode.get("bookingId").asInt()).isEqualTo(bookingId);
        assertThat(jsonNode.get("status").asText()).isEqualTo("CONFIRMED");
    }

    // Cập nhật trang thái booking
    @Test
    public void testUpdateBookingStatus_ShouldUpdateStatusAndReturnUpdatedBooking() throws Exception {
        // Arrange
        Integer bookingId = 104;
        BookingStatus newStatus = BookingStatus.CONFIRMED;

        // Act
        String response = mockMvc.perform(put("/api/booking/" + bookingId + "/status")
                        .param("status", newStatus.name())
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        // Assert
        JsonNode jsonNode = objectMapper.readTree(response);

        assertThat(jsonNode.get("bookingId").asInt()).isEqualTo(bookingId);
        assertThat(jsonNode.get("status").asText()).isEqualTo("CONFIRMED");
    }
}
